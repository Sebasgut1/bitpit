# This is a basic workflow to help you get started with Actions
# workflow - —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
# –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ë–∏–ª–¥–∏—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö üì¶ üêç
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on:
  push:
  pull_request:
  release:
  # tags:
  # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –º–∞—à–∏–Ω
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu_Latest_GCC Without MPI",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu
        run: |
          sudo apt update
          sudo apt install build-essential
          sudo apt-get install -y ninja-build
          sudo apt-get install git
          sudo apt-get install cmake
          sudo apt-get install gfortran
          sudo apt-get install libblas-dev
          sudo apt-get install liblapack-dev
          sudo apt-get install liblapacke-dev
          sudo apt-get install openmpi-bin
          sudo apt-get install libboost-all-dev
          sudo apt-get install libopenmpi-dev
          sudo apt-get install libxml2-dev
          sudo apt-get install vim
          sudo apt-get install mpi
         
          cd opt
          wget https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.17.2.tar.gz
          tar -xzvf petsc-3.17.2.tar.gz
          cd petsc-3.17.2
          ./configure --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-debugging=0 COPTFLAGS='-O3 -march=native -mtune=native' CXXOPTFLAGS='-O3 -march=native -mtune=native' FOPTFLAGS='-O3 -march=native -mtune=native' --with-mpi=0
          make
          
          ninja --version
          cmake --version
          gcc --version

      - name: Configure
        shell: bash
        working-directory: /
        run: |
          mkdir instdir

      - name: Build
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -DBITPIT_ENABLE_MPI=OFF -DBITPIT_VERBOSE_MAKE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DPETSC_ARCH=arch-linux-c-opt -DPETSC_DIR=/opt/petsc-3.17.2 -DPETSC_CURRENT=ON ../
          make
      - name: Install Strip
        shell: bash
        run: |
          cd build
          cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip